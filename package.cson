
# NPM package file, see https://docs.npmjs.com/files/package.json
# Oh, this is CSON, not JSON ( see CoffeeScript-Object-Notation https://github.com/bevry/cson )

#####################################################################
#####################################################################

# Master source file used to generate package.json

# DEFAULT METHOD (if package.json is intact):
# npm run cson2json
#
# ALTERNATIVE METHOD (if package.json is corrupted):
# npm install cson
# node ./readium-shared-js/node_modules/cson/bin/cson2json package.cson > package.json
# Note that on some Windows terminals (e.g. GitShell),
# unfortunately the package.json file might need its encoding
# converted to UTF-no-BOM :(
# This is somehow due to the piped stdout-stdin result being UCS2-little-endian
# (yet this works just fine when the same command is invoked from
# "npm run cson2json" instead of from Node!)

#####################################################################
#####################################################################

'/*': '----------------------------------------------------------------------------'
'..': 'This package.json (JSON) is automatically generated from package.cson (CSON)'
'.-': "DO NOT invoke 'npm init' or 'npm install --save' ('--save-dev' / '--save-optional')"
'._': 'as this would overwrite / update the JSON, not the master CSON!'
'*/': '----------------------------------------------------------------------------'

#####################################################################

name: "readium-js"

version: "0.33.0-alpha"

engines:
    node: ">=16"
    npm: ">=8"
    yarn: ">=1.2"

description: "Readium - core javascript module"

keywords: [
    "readium"
    "epub"
    "epub3"
]

author:
    name: "Readium (Daniel Weck)"
    email: "daniel.weck@gmail.com"
    url: "http://github.com/readium"

license: "BSD-3-Clause"

licenses: [
    type: "BSD-3-Clause"
    url: "http://opensource.org/licenses/BSD-3-Clause"
]

homepage: "http://github.com/readium/readium-js"

bugs:
    url: "http://github.com/readium/readium-js/issues"
    email: "daniel.weck@gmail.com"

repository:
    type: "git"
    url: "git://github.com/readium/readium-js.git"

#####################################################################
files: [

    "build-output/"

    "dev/"

    "license.txt"

    "README.md"
]

# "main" is designed for Node/CommonJS modules, not RequireJS/AMD ones.
# See http://requirejs.org/docs/commonjs.html
# See http://requirejs.org/docs/node.html
#
#main: "build-output/_multiple-bundles/readium-js.js"

#####################################################################
dependencies:

    #"parallelshell": 'latest'
    "concurrently": '^3.6.0'

    "npm-run-all": '^4.1.3'

    "opener": '^1.4.3'

    #"http-server": 'latest'
    "http-server": 'github:readium/http-server#9c6e56279af34381a5dae640b7d73762e8135bd7'
    # SEE: https://github.com/indexzero/http-server/issues/154

    "bowser": '^1.9.3'

#####################################################################
# These dependencies can be fetched by using the "--dev" option
# in "npm install --dev readium-js".
devDependencies:

    "crypto-js": '^3.1.9-1'

#    "zipjs": 'github:gildas-lormeau/zip.js'
#    "zipjs": 'github:ryanackley/zip.js'
    "zip-js": 'github:readium/zip.js#a6f4b24f16dfb5d62d9de48371922bb074ec6c8a'

# see readium-cfi-js:
# "requirejs", "almond", "jquery"


    "requirejs-text": '^2.0.15'

# Below dependencies are only used for building tasks (above are runtime deps):

    # see readium-build-tools (in readium-cfi-js)
    # versionsMaker.js
    "gift": '^0.10.1'

# see readium-cfi-js:
# "cson", "jshint", "glob", "rimraf", "mkdirp", "watch", "live-reload"


#####################################################################
scripts:


#=====================
    cson2json: '

        node ./readium-shared-js/node_modules/cson/bin/cson2json package.cson > package.json
        &&
        node readium-shared-js/readium-build-tools/optimizePackageJsonScripts.js
    '

#=====================
    'prepare:all': '

        npm run
            prepare:submodule
        &&
        npm run
            prepare:local
    '

#=====================
    'prepare:local': '

        (npm outdated || echo outdated)
        &&
        (npm ci || npm install)
        &&
        npm run prepare:local:common
    '

#=====================
    'prepare:yarn:all': '

        yarn run
            prepare:yarn:submodule
        &&
        yarn run
            prepare:yarn:local
    '

#=====================
    'prepare:yarn:local': '

        (yarn outdated || echo outdated)
        &&
        yarn install
        &&
        yarn run prepare:local:common
    '

#=====================
    'prepare:local:common': '
        echo ok
    '
# node readium-shared-js/readium-build-tools/patchRequireJS.js
# node readium-shared-js/readium-build-tools/gitHubForksUpdater.js

#=====================
    'prepare:submodule': '

        cd readium-shared-js
        &&
        npm run prepare:all
        &&
        cd ..
        &&
        ls
    '

#=====================
    'prepare:yarn:submodule': '

        cd readium-shared-js
        &&
        yarn run prepare:yarn:all
        &&
        cd ..
        &&
        ls
    '

#=====================
    clean: '

        (yarn --version || echo noyarn)
        &&
        node --version
        &&
        npm --version
        &&
        npm run rimraf
            build-output/*
        &&
        npm run rimraf
            api-docs/*
    '

#=====================
    apidocs: '

        npm run yuidocjs
    '

#=====================
    'prebuild': '

        npm run clean
    '

#=====================
    build: '

        npm run
            build:styles
        &&
        npm run
            build:scripts
    '

#=====================
    lint: '

        npm run jshint
            "js/**.js"
    '

#=====================
    'genPluginsConfig': '
        cd readium-shared-js/
        &&
        node readium-build-tools/pluginsConfigMaker.js
        &&
        cd ..
    '

#=====================
    'prebuild:scripts': '

        npm run genPluginsConfig
    '

#=====================
#    'prebuild:scripts': '
#
#        npm run
#            lint
#    '

#=====================
    'preversioning': '

        npm run mkdirp
            build-output/_multiple-bundles
        &&
        npm run mkdirp
            build-output/_single-bundle
        &&
        npm run mkdirp
            build-output/XXX
    '

#=====================
    'versioning': '

        node build-config/versioning.js build-output/version.json
        &&
        npm run cpy
            build-output/version.json
            build-output/XXX/
    '

#=====================
    'build:scripts': '

        npm run
            versioning
        &&
        npm run
            build:scripts:multiple
        &&
        npm run
            build:scripts:single
    '

#=====================
    'postbuild:scripts': '

        npm run rimraf
            build-output/XXX
        &&
        npm run rimraf
            build-output/_multiple-bundles/version.json


        &&
        npm run cpy
            build-output/_multiple-bundles/z-worker.js
            build-output/
        &&
        npm run cpy
            build-output/_multiple-bundles/deflate.js
            build-output/
        &&
        npm run cpy
            build-output/_multiple-bundles/inflate.js
            build-output/

        &&
        npm run rimraf
            build-output/_multiple-bundles/z-worker.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/deflate.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/inflate.js

        &&
        (
        npm run cpy
            build-output/_multiple-bundles/z-worker.js.map
            build-output/
        &&
        (
        npm run cpy
            build-output/_multiple-bundles/deflate.js.map
            build-output/
        &&
        npm run cpy
            build-output/_multiple-bundles/inflate.js.map
            build-output/
            
        &&
        npm run rimraf
            build-output/_multiple-bundles/z-worker.js.map
        &&
        npm run rimraf
            build-output/_multiple-bundles/deflate.js.map
        &&
        npm run rimraf
            build-output/_multiple-bundles/inflate.js.map
        )
        || echo "=== SUCCESS [ignore previous error]: no sourcemaps were generated for zip web-worker, deflate, inflate (no uglification)."
        )
    '

#=====================
    'build:scripts:multiple': '

        npm run rjs
             --rjs_bundle=multiple
    '

#=====================
    'postbuild:scripts:multiple': '
        npm run cpy
            readium-shared-js/node_modules/requirejs/bin/r.js
            build-output/
        &&
            mv build-output/r.js
            build-output/_multiple-bundles/RequireJS.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/RequireJS.js.src.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/inflate.js.src.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/deflate.js.src.js
        &&
        npm run rimraf
            build-output/_multiple-bundles/z-worker.js.src.js
    '

#=====================
    'build:scripts:single': '

        npm run rjs
             --rjs_bundle=single
    '

#=====================
    'prebuild:styles': '

        npm run mkdirp
            build-output/css/
    '

#=====================
    'build:styles': '

        npm run cpy
            readium-shared-js/static/sdk.css
            build-output/css/
    '

#=====================
#### BLOCKING! (CTRL-C) [watch][live-reload][http]
    'http:watch': '

        echo > open_webbrowser.js
        &&
        run-p
            \"dowatch\"
            \"httpServe\"
    '
#    \"live-reload\"

#=====================
#### BLOCKING! (CTRL-C) [http]
    'http': '
        npm run genPluginsConfig
        &&
        npm run httpServe
    '

#=====================
#### BLOCKING! (CTRL-C) [watch or nodemon]
    'dowatch': '

        npm run watch
            \"npm run build
                && node readium-shared-js/readium-build-tools/webbrowser.js
                && npm run rimraf
                    open_webbrowser.js\"
            dev/ js/ readium-shared-js/js/ readium-shared-js/plugins/ readium-shared-js/js/
    '
    #    nodemon -q
    #    -w dev/
    #    --ext \".\"
    #    --exec \" ... \"

#=====================
    'httpServe': '

        node
            readium-shared-js/readium-build-tools/http-server.js
            
            -LOGFILE
            http.log
            
            -OPEN
            /dev/
            
            -c-1
            -a 127.0.0.1
            -p 9090
            --cors
            .
    '

#=====================
#    'live-reload': '
#
#        live-reload --port 9091 --delay 1000 build-output/
#    '
